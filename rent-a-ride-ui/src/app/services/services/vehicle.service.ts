/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnVehicle } from '../fn/vehicle/approve-return-vehicle';
import { ApproveReturnVehicle$Params } from '../fn/vehicle/approve-return-vehicle';
import { borrowVehicle } from '../fn/vehicle/borrow-vehicle';
import { BorrowVehicle$Params } from '../fn/vehicle/borrow-vehicle';
import { findAllBorrowedVehicles } from '../fn/vehicle/find-all-borrowed-vehicles';
import { FindAllBorrowedVehicles$Params } from '../fn/vehicle/find-all-borrowed-vehicles';
import { findAllReturnedVehicles } from '../fn/vehicle/find-all-returned-vehicles';
import { FindAllReturnedVehicles$Params } from '../fn/vehicle/find-all-returned-vehicles';
import { findAllVehicles } from '../fn/vehicle/find-all-vehicles';
import { FindAllVehicles$Params } from '../fn/vehicle/find-all-vehicles';
import { findAllVehiclesByOwner } from '../fn/vehicle/find-all-vehicles-by-owner';
import { FindAllVehiclesByOwner$Params } from '../fn/vehicle/find-all-vehicles-by-owner';
import { findVehicleById } from '../fn/vehicle/find-vehicle-by-id';
import { FindVehicleById$Params } from '../fn/vehicle/find-vehicle-by-id';
import { PageResponseBorrowedVehicleResponse } from '../models/page-response-borrowed-vehicle-response';
import { PageResponseVehicleResponse } from '../models/page-response-vehicle-response';
import { returnVehicle } from '../fn/vehicle/return-vehicle';
import { ReturnVehicle$Params } from '../fn/vehicle/return-vehicle';
import { saveVehicle } from '../fn/vehicle/save-vehicle';
import { SaveVehicle$Params } from '../fn/vehicle/save-vehicle';
import { updateArchivedStatus } from '../fn/vehicle/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/vehicle/update-archived-status';
import { updateShaeableStatus } from '../fn/vehicle/update-shaeable-status';
import { UpdateShaeableStatus$Params } from '../fn/vehicle/update-shaeable-status';
import { VehicleResponse } from '../models/vehicle-response';

@Injectable({ providedIn: 'root' })
export class VehicleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllVehicles()` */
  static readonly FindAllVehiclesPath = '/vehicles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllVehicles()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVehicles$Response(params?: FindAllVehicles$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseVehicleResponse>> {
    return findAllVehicles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllVehicles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVehicles(params?: FindAllVehicles$Params, context?: HttpContext): Observable<PageResponseVehicleResponse> {
    return this.findAllVehicles$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseVehicleResponse>): PageResponseVehicleResponse => r.body)
    );
  }

  /** Path part for operation `saveVehicle()` */
  static readonly SaveVehiclePath = '/vehicles';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveVehicle()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveVehicle$Response(params: SaveVehicle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveVehicle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveVehicle$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveVehicle(params: SaveVehicle$Params, context?: HttpContext): Observable<number> {
    return this.saveVehicle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `borrowVehicle()` */
  static readonly BorrowVehiclePath = '/vehicles/borrow/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowVehicle()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowVehicle$Response(params: BorrowVehicle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowVehicle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowVehicle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowVehicle(params: BorrowVehicle$Params, context?: HttpContext): Observable<number> {
    return this.borrowVehicle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateShaeableStatus()` */
  static readonly UpdateShaeableStatusPath = '/vehicles/shareable/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShaeableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShaeableStatus$Response(params: UpdateShaeableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateShaeableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShaeableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShaeableStatus(params: UpdateShaeableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateShaeableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnVehicle()` */
  static readonly ReturnVehiclePath = '/vehicles/borrow/return/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnVehicle()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnVehicle$Response(params: ReturnVehicle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnVehicle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnVehicle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnVehicle(params: ReturnVehicle$Params, context?: HttpContext): Observable<number> {
    return this.returnVehicle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnVehicle()` */
  static readonly ApproveReturnVehiclePath = '/vehicles/borrow/return/approve/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnVehicle()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnVehicle$Response(params: ApproveReturnVehicle$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnVehicle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnVehicle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnVehicle(params: ApproveReturnVehicle$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnVehicle$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/vehicles/archived/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findVehicleById()` */
  static readonly FindVehicleByIdPath = '/vehicles/{vehicle-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findVehicleById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findVehicleById$Response(params: FindVehicleById$Params, context?: HttpContext): Observable<StrictHttpResponse<VehicleResponse>> {
    return findVehicleById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findVehicleById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findVehicleById(params: FindVehicleById$Params, context?: HttpContext): Observable<VehicleResponse> {
    return this.findVehicleById$Response(params, context).pipe(
      map((r: StrictHttpResponse<VehicleResponse>): VehicleResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedVehicles()` */
  static readonly FindAllReturnedVehiclesPath = '/vehicles/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedVehicles()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedVehicles$Response(params?: FindAllReturnedVehicles$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedVehicleResponse>> {
    return findAllReturnedVehicles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedVehicles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedVehicles(params?: FindAllReturnedVehicles$Params, context?: HttpContext): Observable<PageResponseBorrowedVehicleResponse> {
    return this.findAllReturnedVehicles$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedVehicleResponse>): PageResponseBorrowedVehicleResponse => r.body)
    );
  }

  /** Path part for operation `findAllVehiclesByOwner()` */
  static readonly FindAllVehiclesByOwnerPath = '/vehicles/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllVehiclesByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVehiclesByOwner$Response(params?: FindAllVehiclesByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseVehicleResponse>> {
    return findAllVehiclesByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllVehiclesByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllVehiclesByOwner(params?: FindAllVehiclesByOwner$Params, context?: HttpContext): Observable<PageResponseVehicleResponse> {
    return this.findAllVehiclesByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseVehicleResponse>): PageResponseVehicleResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedVehicles()` */
  static readonly FindAllBorrowedVehiclesPath = '/vehicles/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedVehicles()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedVehicles$Response(params?: FindAllBorrowedVehicles$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedVehicleResponse>> {
    return findAllBorrowedVehicles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedVehicles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedVehicles(params?: FindAllBorrowedVehicles$Params, context?: HttpContext): Observable<PageResponseBorrowedVehicleResponse> {
    return this.findAllBorrowedVehicles$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedVehicleResponse>): PageResponseBorrowedVehicleResponse => r.body)
    );
  }

}
